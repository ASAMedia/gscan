var _       = require('lodash'),
    Promise = require('bluebird'),
    path    = require('path'),
    pfs     = require('../promised-fs'),
    PJV     = require('package-json-validator').PJV,
    spec    = require('../../spec.js'),
    checkPackageJSON;

/**
 * The following is the set of messages output by Ghost about theme package.json files.
 * The aim of this check is to replace, and improve on the info generated by Ghost
 *
 * ```
 * "parsepackagejson": {
 *      "couldNotReadPackage": "Could not read package.json file",
 *      "nameOrVersionMissing": "\"name\" or \"version\" is missing from theme package.json file.",
 *      "willBeRequired": "This will be required in future. Please see {url}",
 *      "themeFileIsMalformed": "Theme package.json file is malformed"
 *  },
 * "validatethemes": {
 *      "themeWithNoPackage": {
 *          "message": "Found a theme with no package.json file",
 *          "context": "Theme name: {name}",
 *          "help": "This will be required in future. Please see http://docs.ghost.org/themes/."
 *      },
 *      "malformedPackage": {
 *          "message": "Found a malformed package.json",
 *          "context": "Theme name: {name}",
 *          "help": "Valid package.json will be required in future. Please see http://docs.ghost.org/themes/."
 *      }
 * }
 * ```
 */

checkPackageJSON = function checkPackageJSON(theme) {
    var out = [],
        packageJSONFile = 'package.json',
        packageJSONPath = path.join(theme.path, packageJSONFile),
        result;

    if (!_.some(theme.files, {file: packageJSONFile})) {
        // file doesn't exist
        out.push(_.extend({}, spec.rules['package.json-required'], {
            ref: packageJSONFile,
            message: 'The package.json file is missing.',
            details: 'This file will be required in future. Please see http://docs.ghost.org/themes/.'
        }));

        return Promise.resolve(out);
    } else {
        return pfs.readFile(packageJSONPath, 'utf8').then(function (packageJSON) {
            result = PJV.validate(packageJSON);

            if (!result.valid) {
                // TODO separate out critical JSON issues and validation errors
                out.push(_.extend({}, spec.rules['package.json-valid'], {
                    ref: packageJSONFile,
                    message: 'The package.json file is malformed',
                    details: result.critical || result.errors.join(', ')
                }));
            }

            // Come back to this later, packageJSON validator is out of date and we have our own idea of what is important
            //out.warnings = result.warnings ? out.warnings.concat(result.warnings) : out.warnings;
            //out.recommendations = result.recommendations ? out.recommendations.concat(result.recommendations) : out.recommendations;
            return out;
        }).catch(function (error) {
            out.push(_.extend({}, spec.rules['package.json-valid'], {
                ref: packageJSONFile,
                message: 'Could not read package.json file',
                details: error
            }));

            return out;
        });
    }
};

module.exports = checkPackageJSON;
